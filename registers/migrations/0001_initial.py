# -*- coding: utf-8 -*-
# Generated by Django 1.9.9 on 2016-09-19 05:03
from __future__ import unicode_literals

import datetime
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organisation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('operating_system', models.CharField(max_length=120)),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'Generic Server'), (1, 'Domain Controller'), (2, 'Database Server'), (3, 'Application Host'), (4, 'Management Server'), (5, 'Site Server'), (6, 'File Server'), (7, 'Print Server'), (8, 'Block Storage Server'), (9, 'Email Server'), (10, 'Network Device')], default=0)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Production'), (1, 'Pre-Production'), (2, 'Legacy'), (3, 'Decommissioned')], default=0)),
                ('database_backup', models.CharField(blank=True, help_text='URL to Database backup/restore/logs info', max_length=2048, null=True)),
                ('database_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('filesystem_backup', models.CharField(blank=True, help_text='URL to Filesystem backup/restore/logs info', max_length=2048, null=True)),
                ('filesystem_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('appdata_backup', models.CharField(blank=True, help_text='URL to Application Data backup/restore/logs info', max_length=2048, null=True)),
                ('appdata_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('appconfig_backup', models.CharField(blank=True, help_text='URL to Config for App/Server', max_length=2048, null=True)),
                ('appconfig_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('os_backup', models.CharField(blank=True, help_text='URL to Build Documentation', max_length=2048, null=True)),
                ('os_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('last_tested', models.DateField(blank=True, help_text='Last tested date', null=True)),
                ('test_schedule', models.PositiveSmallIntegerField(default=12, help_text='Test Schedule in Months, 0 for never')),
                ('comment', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('system__name',),
            },
        ),
        migrations.CreateModel(
            name='BusinessFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='BusinessProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('criticality', models.PositiveIntegerField(blank=True, choices=[(1, 'Critical'), (2, 'Moderate'), (3, 'Low')], help_text='How critical is the process?', null=True)),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'business processes',
            },
        ),
        migrations.CreateModel(
            name='BusinessService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(help_text='Service number', unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='DocumentApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approval_role', models.CharField(blank=True, help_text='The role in which the user is approving the document.', max_length=256, null=True)),
                ('evidence', models.FileField(blank=True, help_text='Optional evidence to support the document approval (email, etc.)', max_length=255, null=True, upload_to='uploads/%Y/%m/%d')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Hardware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('device_type', models.PositiveSmallIntegerField(choices=[(1, 'Network'), (2, 'Mobile'), (3, 'Domain PC'), (4, 'Hostname')])),
                ('username', models.CharField(editable=False, max_length=128, null=True)),
                ('email', models.CharField(editable=False, max_length=512, null=True)),
                ('ipv4', models.TextField(default='', editable=False)),
                ('ports', models.TextField(default='', editable=False)),
                ('name', models.CharField(editable=False, max_length=2048, unique=True)),
                ('serials', models.TextField(editable=False, null=True)),
                ('local_info', models.TextField(editable=False, null=True)),
                ('local_current', models.BooleanField(default=True, help_text='Does local state match central state?')),
            ],
            options={
                'ordering': ('name', '-device_type'),
                'verbose_name_plural': 'hardware',
            },
        ),
        migrations.CreateModel(
            name='ITSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('system_id', models.CharField(max_length=16, unique=True)),
                ('acronym', models.CharField(blank=True, max_length=16, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Production'), (1, 'Development'), (2, 'Production (Legacy)'), (3, 'Decommissioned'), (4, 'Unknown')], default=4)),
                ('status_display', models.CharField(editable=False, max_length=128, null=True)),
                ('description', models.TextField(blank=True)),
                ('link', models.CharField(blank=True, help_text='URL to web application', max_length=2048, null=True)),
                ('documentation', models.URLField(blank=True, help_text='URL to end-user documentation', max_length=2048, null=True)),
                ('technical_documentation', models.URLField(blank=True, help_text='URL to technical documentation', max_length=2048, null=True)),
                ('status_html', models.URLField(blank=True, help_text='URL to status/uptime info', max_length=2048, null=True)),
                ('authentication', models.PositiveSmallIntegerField(choices=[(1, 'Domain Credentials'), (2, 'Single Sign On'), (3, 'Externally Managed')], default=1)),
                ('authentication_display', models.CharField(editable=False, max_length=128, null=True)),
                ('access', models.PositiveSmallIntegerField(choices=[(1, 'Public Internet'), (2, 'Authenticated Extranet'), (3, 'Corporate Network'), (4, 'Local System (Networked)'), (5, 'Local System (Standalone)')], default=3)),
                ('access_display', models.CharField(editable=False, max_length=128, null=True)),
                ('request_access', models.TextField(blank=True, help_text='Procedure to request access to this application')),
                ('criticality', models.PositiveIntegerField(blank=True, choices=[(1, 'Critical'), (2, 'Moderate'), (3, 'Low')], null=True)),
                ('criticality_display', models.CharField(editable=False, max_length=128, null=True)),
                ('availability', models.PositiveIntegerField(blank=True, choices=[(1, '24 hours a day, 7 days a week, 365 days a year'), (2, 'Department core business hours')], help_text='Expected availability for this IT System', null=True)),
                ('availability_display', models.CharField(editable=False, max_length=128, null=True)),
                ('schema_url', models.URLField(blank=True, help_text='URL to schema diagram', max_length=2048, null=True)),
                ('system_reqs', models.TextField(blank=True, help_text='A written description of the requirements to use the system (e.g. web browser version)')),
                ('system_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Web application'), (2, 'Client application'), (3, 'Mobile application'), (4, 'Service')], null=True)),
                ('system_type_display', models.CharField(editable=False, max_length=128, null=True)),
                ('vulnerability_docs', models.URLField(blank=True, help_text='URL to documentation related to known vulnerability reports', max_length=2048, null=True)),
                ('workaround', models.TextField(blank=True, help_text='Written procedure for users to work around an outage of this system')),
                ('recovery_docs', models.URLField(blank=True, help_text='URL to recovery procedure(s) in the event of system failure', max_length=2048, null=True)),
                ('mtd', models.DurationField(default=datetime.timedelta(14), help_text='Maximum Tolerable Downtime (days hh:mm:ss)')),
                ('rto', models.DurationField(default=datetime.timedelta(7), help_text='Recovery Time Objective (days hh:mm:ss)')),
                ('rpo', models.DurationField(default=datetime.timedelta(1), help_text='Recovery Point Objective/Data Loss Interval (days hh:mm:ss)')),
                ('contingency_plan', models.FileField(blank=True, help_text='NOTE: changes to this field will delete current contingency plan approvals.', max_length=255, null=True, upload_to='uploads/%Y/%m/%d')),
                ('contingency_plan_status', models.PositiveIntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Released'), (3, 'Superseded')], null=True)),
                ('contingency_plan_last_tested', models.DateField(blank=True, help_text='Date that the plan was last tested.', null=True)),
                ('ah_support', models.ForeignKey(blank=True, help_text='After-hours support contact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ah_support', to='organisation.DepartmentUser', verbose_name='after hours support')),
                ('bh_support', models.ForeignKey(blank=True, help_text='Business hours support contact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='bh_support', to='organisation.DepartmentUser', verbose_name='business hours support')),
                ('contingency_plan_approvals', models.ManyToManyField(blank=True, to='registers.DocumentApproval')),
                ('cost_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.CostCentre')),
                ('custodian', models.ForeignKey(help_text='Appication custodian', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_custodianed', to='organisation.DepartmentUser')),
                ('data_custodian', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_data_custodianed', to='organisation.DepartmentUser')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name': 'IT System',
            },
        ),
        migrations.CreateModel(
            name='ITSystemDependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criticality', models.PositiveIntegerField(choices=[(1, 'Critical'), (2, 'Moderate'), (3, 'Low')], help_text='How critical is the dependency?')),
                ('dependency', models.ForeignKey(help_text='The system which is depended upon by the IT System', on_delete=django.db.models.deletion.PROTECT, related_name='dependency', to='registers.ITSystem')),
                ('itsystem', models.ForeignKey(help_text='The IT System', on_delete=django.db.models.deletion.PROTECT, to='registers.ITSystem', verbose_name='IT System')),
            ],
            options={
                'ordering': ('itsystem__name', 'criticality'),
                'verbose_name': 'IT System dependency',
                'verbose_name_plural': 'IT System dependencies',
            },
        ),
        migrations.CreateModel(
            name='ITSystemHardware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'Application server'), (2, 'Database server'), (3, 'Network file storage'), (4, 'Reverse proxy')])),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='registers.Hardware')),
            ],
            options={
                'ordering': ('host__name',),
                'verbose_name_plural': 'IT System hardware',
            },
        ),
        migrations.CreateModel(
            name='ProcessITSystemRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('importance', models.PositiveIntegerField(choices=[(1, 'High'), (2, 'Medium'), (3, 'Low')], help_text='How important is the IT System to undertaking this process?')),
                ('itsystem', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='registers.ITSystem')),
                ('process', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='registers.BusinessProcess')),
            ],
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2048, unique=True)),
                ('url', models.CharField(blank=True, max_length=2000, null=True)),
                ('os', models.BooleanField(default=False, help_text='Software is an operating system?', verbose_name='OS')),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'software',
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2048, unique=True)),
                ('user_count', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='itsystem',
            name='hardwares',
            field=models.ManyToManyField(blank=True, help_text='Hardware that is used to provide this IT System', to='registers.ITSystemHardware'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='org_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.OrgUnit'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='owner',
            field=models.ForeignKey(help_text='Application owner', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_owned', to='organisation.DepartmentUser'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='preferred_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_preferred_contact', to='organisation.DepartmentUser'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='softwares',
            field=models.ManyToManyField(blank=True, help_text='Software that is used to provide this IT System', to='registers.Software'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='user_groups',
            field=models.ManyToManyField(blank=True, help_text='User group(s) that use this IT System', to='registers.UserGroup'),
        ),
    ]
