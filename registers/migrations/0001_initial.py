# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2015-12-16 23:04
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tracking', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('operating_system', models.CharField(max_length=120)),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'Generic Server'), (1, 'Domain Controller'), (2, 'Database Server'), (3, 'Application Host'), (4, 'Management Server'), (5, 'Site Server'), (6, 'File Server'), (7, 'Print Server'), (8, 'Block Storage Server'), (9, 'Email Server'), (10, 'Network Device')], default=0)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Production'), (1, 'Pre-Production'), (2, 'Legacy'), (3, 'Decommissioned')], default=0)),
                ('database_backup', models.CharField(blank=True, help_text='URL to Database backup/restore/logs info', max_length=2048, null=True)),
                ('database_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('filesystem_backup', models.CharField(blank=True, help_text='URL to Filesystem backup/restore/logs info', max_length=2048, null=True)),
                ('filesystem_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('appdata_backup', models.CharField(blank=True, help_text='URL to Application Data backup/restore/logs info', max_length=2048, null=True)),
                ('appdata_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('appconfig_backup', models.CharField(blank=True, help_text='URL to Config for App/Server', max_length=2048, null=True)),
                ('appconfig_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('os_backup', models.CharField(blank=True, help_text='URL to Build Documentation', max_length=2048, null=True)),
                ('os_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('last_tested', models.DateField(blank=True, help_text='Last tested date', null=True)),
                ('test_schedule', models.PositiveSmallIntegerField(default=12, help_text='Test Schedule in Months, 0 for never')),
                ('comment', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('system__name',),
            },
        ),
        migrations.CreateModel(
            name='CostCentre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, max_length=25, unique=True)),
                ('code', models.CharField(max_length=5, unique=True)),
                ('admin', models.ForeignKey(blank=True, help_text='Admin', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='admin_ccs', to='tracking.DepartmentUser')),
                ('business_manager', models.ForeignKey(blank=True, help_text='Business Manager', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='bmanage_ccs', to='tracking.DepartmentUser')),
            ],
            options={
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=2048, unique=True)),
                ('guid', models.CharField(help_text='AD GUID (ad:...) or PRTG object id (prtg:...)', max_length=48, unique=True)),
                ('device_type', models.PositiveSmallIntegerField(choices=[(0, 'Computer'), (1, 'Mobile'), (2, 'PRTG')], default=0)),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='devices_owned', to='tracking.DepartmentUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Hardware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('device_type', models.PositiveSmallIntegerField(choices=[(1, 'Network'), (2, 'Mobile'), (3, 'Domain PC'), (4, 'Hostname')], editable=False)),
                ('username', models.CharField(editable=False, max_length=128, null=True)),
                ('email', models.CharField(editable=False, max_length=512, null=True)),
                ('ipv4', models.TextField(default='', editable=False)),
                ('ports', models.TextField(default='', editable=False)),
                ('name', models.CharField(editable=False, max_length=2048, unique=True)),
                ('serials', models.TextField(editable=False, null=True)),
                ('local_info', models.TextField(editable=False, null=True)),
                ('local_current', models.BooleanField(default=True, help_text='Does local state match central state?')),
                ('computer', models.OneToOneField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='tracking.Computer')),
                ('mobile', models.OneToOneField(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='tracking.Mobile')),
            ],
            options={
                'ordering': ('name', '-device_type'),
            },
        ),
        migrations.CreateModel(
            name='ITSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('system_id', models.CharField(max_length=16, unique=True)),
                ('acronym', models.CharField(blank=True, max_length=16, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Production'), (1, 'Development'), (2, 'Production (Legacy)'), (3, 'Decommissioned'), (4, 'Unknown')], default=4)),
                ('status_display', models.CharField(editable=False, max_length=128, null=True)),
                ('description', models.TextField(blank=True)),
                ('link', models.CharField(blank=True, help_text='URL to Application itself', max_length=2048, null=True)),
                ('documentation', models.CharField(blank=True, help_text='URL to Documentation', max_length=2048, null=True)),
                ('status_html', models.CharField(blank=True, help_text='URL to status/uptime info', max_length=2048, null=True)),
                ('authentication', models.PositiveSmallIntegerField(choices=[(1, 'Domain Credentials'), (2, 'Single Sign On'), (3, 'Externally Managed')], default=1)),
                ('authentication_display', models.CharField(editable=False, max_length=128, null=True)),
                ('access', models.PositiveSmallIntegerField(choices=[(1, 'Public Internet'), (2, 'Authenticated Extranet'), (3, 'Corporate Network'), (4, 'Local System (Networked)'), (5, 'Local System (Standalone)')], default=3)),
                ('access_display', models.CharField(editable=False, max_length=128, null=True)),
                ('request_access', models.TextField(blank=True)),
                ('custodian', models.ForeignKey(help_text='Appication custodian', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_custodianed', to='tracking.DepartmentUser')),
                ('data_custodian', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_data_custodianed', to='tracking.DepartmentUser')),
                ('devices', models.ManyToManyField(blank=True, to='registers.Device')),
                ('owner', models.ForeignKey(help_text='Application owner', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_owned', to='tracking.DepartmentUser')),
                ('preferred_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_preferred_contact', to='tracking.DepartmentUser')),
            ],
            options={
                'verbose_name': 'IT System',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('address', models.TextField(unique=True)),
                ('pobox', models.TextField(blank=True)),
                ('phone', models.CharField(blank=True, max_length=128, null=True)),
                ('fax', models.CharField(blank=True, max_length=128, null=True)),
                ('email', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='OrgUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_type', models.PositiveSmallIntegerField(choices=[(0, 'Department'), (1, 'Division'), (2, 'Branch'), (3, 'Region'), (4, 'Cost Centre'), (5, 'Office'), (6, 'District')], default=4)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('acronym', models.CharField(blank=True, max_length=16, null=True)),
                ('svg', models.TextField(editable=False, null=True)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='registers.Location')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tracking.DepartmentUser')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='registers.OrgUnit')),
            ],
            options={
                'ordering': ('name',),
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SoftwareLicense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=256, null=True, unique=True)),
                ('used_licenses', models.PositiveSmallIntegerField(default=0, editable=False)),
                ('available_licenses', models.PositiveSmallIntegerField(default=0)),
                ('license_details', models.TextField(blank=True, help_text='Direct license keys or details')),
                ('devices', models.ManyToManyField(blank=True, to='registers.Device')),
                ('primary_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tracking.DepartmentUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('details', models.TextField(blank=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
            ],
        ),
        migrations.AddField(
            model_name='softwarelicense',
            name='vendor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='registers.Vendor'),
        ),
        migrations.AddField(
            model_name='costcentre',
            name='division',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='costcentres_in_division', to='registers.OrgUnit'),
        ),
        migrations.AddField(
            model_name='costcentre',
            name='manager',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='manage_ccs', to='tracking.DepartmentUser'),
        ),
        migrations.AddField(
            model_name='costcentre',
            name='org_position',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='registers.OrgUnit'),
        ),
        migrations.AddField(
            model_name='costcentre',
            name='tech_contact',
            field=models.ForeignKey(blank=True, help_text='Technical Contact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tech_ccs', to='tracking.DepartmentUser'),
        ),
        migrations.AddField(
            model_name='backup',
            name='parent_host',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='host', to='registers.Hardware'),
        ),
        migrations.AddField(
            model_name='backup',
            name='system',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='registers.Hardware'),
        ),
        migrations.AlterUniqueTogether(
            name='hardware',
            unique_together=set([('computer', 'mobile')]),
        ),
    ]
